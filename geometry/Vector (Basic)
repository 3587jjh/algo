const double PI = 2*acos(0.0);
bool equal(double a, double b) {
	double diff = fabs(a - b);
	if (diff < 1e-10) return true;
	return diff < 1e-8 * max(fabs(a), fabs(b));
}

struct VT {
	double x, y;
	VT(double _x=0, double _y=0) : x(_x),y(_y){}
	bool operator ==(const VT& rhs) const {
		return equal(x, rhs.x) && equal(y, rhs.y);
	}
	bool operator <(const VT& rhs) const {
		if (*this == rhs) return false;
		return !equal(x, rhs.x) ? x < rhs.x : y < rhs.y;
	}
	bool operator <=(const VT& rhs) const {
		return *this == rhs || *this < rhs;
	}
	VT operator +(const VT& rhs) const {
		return VT(x + rhs.x, y + rhs.y);
	}
	VT operator -(const VT& rhs) const {
		return VT(x - rhs.x, y - rhs.y);
	}
	VT operator *(double rhs) const {
		return VT(x * rhs, y * rhs);
	}
	double norm() const { return hypot(x, y); } // 벡터의 크기 반환
	VT normalize() const { // 현재 벡터의 방향을 갖는 단위벡터 반환
		double p = norm();
		if (equal(p, 0.0)) return *this;
		return VT(x / p, y / p);
	}
	double dot(const VT& rhs) const { // 내적
		return x * rhs.x + y * rhs.y;
	}
	double cross(const VT& rhs) const { // 외적
		return x * rhs.y - y * rhs.x;
	}
	VT project(const VT& rhs) const {
        // 현재 벡터를 rhs에 사영한 벡터를 반환
		VT r = rhs.normalize();
		return r * r.dot(*this);
	}
};

double ccw(VT a, VT b, VT c) {
    return (b-a).cross(c-a);
}
