const double PI = 2*acos(0.0);
bool equal(double a, double b) {
	double diff = fabs(a - b);
	if (diff < 1e-10) return true;
	return diff < 1e-8 * max(fabs(a), fabs(b));
}

struct VT {
	double x, y;
	VT(double _x=0, double _y=0) : x(_x),y(_y){}
	bool operator ==(const VT& rhs) const {
		return equal(x, rhs.x) && equal(y, rhs.y);
	}
	bool operator <(const VT& rhs) const {
		if (*this == rhs) return false;
		return !equal(x, rhs.x) ? x < rhs.x : y < rhs.y;
	}
	bool operator <=(const VT& rhs) const {
		return *this == rhs || *this < rhs;
	}
	VT operator +(const VT& rhs) const {
		return VT(x + rhs.x, y + rhs.y);
	}
	VT operator -(const VT& rhs) const {
		return VT(x - rhs.x, y - rhs.y);
	}
	VT operator -() const {
		return VT(-x, -y);
	}
	VT operator *(double rhs) const {
		return VT(x * rhs, y * rhs);
	}
	double norm() const { return hypot(x, y); } // 벡터의 크기 반환
	VT normalize() const { // 현재 벡터의 방향을 갖는 단위벡터 반환
		double p = norm();
		if (equal(p, 0.0)) return *this;
		return VT(x / p, y / p);
	}
	double dot(const VT& rhs) const { // 내적
		return x * rhs.x + y * rhs.y;
	}
	double cross(const VT& rhs) const { // 외적
		return x * rhs.y - y * rhs.x;
	}
	VT project(const VT& rhs) const {
        // 현재 벡터를 rhs에 사영한 벡터를 반환
		VT r = rhs.normalize();
		return r * r.dot(*this);
	}
};

double ccw(VT a, VT b, VT c) {
    return (b-a).cross(c-a);
}

// 점 p,a,b가 일직선상에 있을 때 p가 [a, b]에 있는지 본다
bool inRange(VT p, VT a, VT b) {
    if (b < a) swap(a, b);
    return a <= p && p <= b;
}

// ab를 포함하는 직선과 cd를 포함하는 직선의 교점을 구해 x에 저장
// 교점이 존재하면 참, 존재하지 않으면(평행/겹침) 거짓을 반환
bool lineIntersection(VT a, VT b, VT c, VT d, VT& x) {
    double det = (b-a).cross(d-c);
    if (equal(det, 0)) return false;
    x = a + (b-a) * ((c-a).cross(d-c) / det);
    return true;
}

// ab선분과 cd선분이 겹치는지 여부를 반환
bool segIntersect(VT a, VT b, VT c, VT d) {
    double ab = ccw(a, b, c) * ccw(a, b, d);
    double cd = ccw(c, d, a) * ccw(c, d, b);
    // 두 선분이 한 직선 위에 있거나 끝 점이 겹치는 경우
    if (equal(ab, 0) && equal(cd, 0)) {
        if (b < a) swap(a, b); 
        if (d < c) swap(c, d);
        return !(d < a || b < c);
    }
    // 선분에 다른 선분이 접촉한 경우도 고려
    return (equal(ab, 0) || ab < 0) && 
        (equal(cd, 0) || cd < 0);
}

// ab선분과 cd선분이 겹치는지 여부를 반환
// 겹치는 경우 교점(무한개면 임의의 교점)을 x에 저장 
bool segIntersection(VT a, VT b, VT c, VT d, VT& x) {
    if (lineIntersection(a, b, c, d, x))
        return inRange(x, a, b) && inRange(x, c, d);
    if (b < a) swap(a, b); if (d < c) swap(c, d);
    if (!equal(ccw(a, b, c), 0) || d < a || b < c) return false;
    if (a < c) x = c; else x = a;
    return true;
}

// 점 p에서 ab직선에 내린 수선의 발을 반환
VT foot(VT p, VT a, VT b) {
    return a + (p-a).project(b-a);
}

// 점 p에서 ab직선까지의 최소 거리를 반환
double pointToLine(VT p, VT a, VT b) {
    return (p-foot(p, a, b)).norm();
}

// 점 p에서 ab선분까지의 최소 거리를 반환
double pointToSeg(VT p, VT a, VT b) {
	VT h = foot(p, a, b);
	if (inRange(h, a, b)) return (p-h).norm();
	return min((p-a).norm(), (p-b).norm());
}

// ab선분에서 cd선분까지의 최소 거리를 반환
double segToSeg(VT a, VT b, VT c, VT d) {
	if (segIntersect(a, b, c, d)) return 0.0;
	return min({pointToSeg(a, c, d), pointToSeg(b, c, d),
		pointToSeg(c, a, b), pointToSeg(d, a, b)});
}

// 다각형 p의 넓이를 반환
double area(const vector<VT>& p) {
	double ret = 0;
	for (int i = 0; i < p.size(); ++i) {
		int j = (i+1)%p.size();
		ret += p[i].cross(p[j]);
	}
	return fabs(ret) / 2;
}

// 점 q가 다각형 p의 경계에 위치하는지 여부를 반환
bool onBound(const vector<VT>& p, VT q) {
	for (int i = 0; i < p.size(); ++i) {
		int j = (i+1)%p.size();
		if (equal(ccw(q, p[i], p[j]), 0) && 
			inRange(q, p[i], p[j]))
			return true;
	}
	return false;
}

// 점 q가 다각형 p의 내부에 있는지 외부에 있는지를 판별
// q가 p의 경계에 없는 상태(=!onBound(p, q))를 가정
bool inside(const vector<VT>& p, VT q) {
    int cross = 0, n = p.size();
    for (int i = 0; i < n; ++i) {
        int j = (i+1)%n;
        if ((!equal(p[i].y, q.y) && p[i].y > q.y) !=
			(!equal(p[j].y, q.y) && p[j].y > q.y)) {
			double atX = (q.y - p[i].y) * (p[j].x - p[i].x) /
	            (p[j].y - p[i].y) + p[i].x;
			if (q.x < atX) ++cross;	
		}
	}
	return cross%2 > 0;
}
