const double INF = 1e10; // 좌표의 최대 범위
bool inRange(double p, double a, double b) {
	if (!equal(a, b) && b < a) swap(a, b);
	return (equal(a, p) || a < p) && (equal(p, b) || p < b);
}
// 구간 [x1, x2]에 의해 다각형 p1,p2의 교집합이 잘리는 부분의 사다리꼴 넓이 합을 반환
double partialArea(const vector<VT>& p1, const vector<VT>& p2, double x1, double x2) {
	vector<double> ly, ry; VT c;
	for (int i = 0; i < p1.size(); ++i) {
		int j = (i+1) % p1.size();
		if (inRange(x1,p1[i].x,p1[j].x)&&inRange(x2,p1[i].x,p1[j].x)){
			segIntersection(p1[i],p1[j],VT(x1,-INF),VT(x1,INF),c);
			ly.push_back(c.y);
			segIntersection(p1[i],p1[j],VT(x2,-INF),VT(x2,INF),c);
			ry.push_back(c.y);
		}
	}
	for (int i = 0; i < p2.size(); ++i) {
		int j = (i+1) % p2.size();
		if (inRange(x1,p2[i].x,p2[j].x)&&inRange(x2,p2[i].x,p2[j].x)){
			segIntersection(p2[i],p2[j],VT(x1,-INF),VT(x1,INF),c);
			ly.push_back(c.y);
			segIntersection(p2[i],p2[j],VT(x2,-INF),VT(x2,INF),c);
			ry.push_back(c.y);
		}
	}
	sort(ly.begin(), ly.end());
	sort(ry.begin(), ry.end());
	assert(ly.size() == ry.size());

	double ret = 0;
	for (int i = 0; i+1 < ly.size(); ++i) {
		double mx = (x1+x2) / 2;
		double my = (ly[i]+ly[i+1]+ry[i]+ry[i+1]) / 4;
		VT q(mx, my);
		if (inside(p1, q) && inside(p2, q))
			ret += (x2-x1)*(ly[i+1]-ly[i]+ry[i+1]-ry[i])/2;
	}
	return ret;
}
// 두 다각형 p, q의 교집합 면적을 반환
double intersectionArea(const vector<VT>& p, const vector<VT>& q) {
	vector<double> evx;
	for (int i = 0; i < p.size(); ++i) {
		evx.push_back(p[i].x);
		for (int j = 0; j < q.size(); ++j) {
			evx.push_back(q[j].x);
			VT c;
			int ni = (i+1)%p.size(), nj = (j+1)%q.size();
			if (segIntersection(p[i], p[ni], q[j], q[nj], c))
				evx.push_back(c.x);
		}
	}
	sort(all(evx));
	evx.erase(unique(all(evx)), evx.end());

	double ret = 0;
	for (int i = 0; i+1 < evx.size(); ++i)
		ret += partialArea(p, q, evx[i], evx[i+1]);
	return ret;
}
