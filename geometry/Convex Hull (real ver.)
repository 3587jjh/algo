struct Comparator {
	VT pivot;
	Comparator(VT _pivot):pivot(_pivot){}
	bool operator ()(VT a, VT b) {
		double det = ccw(pivot, a, b);
		if (!equal(det, 0)) return det > 0;
		return (a-pivot).norm() < (b-pivot).norm();
	}
};
vector<VT> grahamScan(vector<VT>& p) {
	VT pivot = *min_element(p.begin(), p.end());
	sort(p.begin(), p.end(), Comparator(pivot));
    vector<VT> ret;
	
	for (int i = 0; i < p.size(); ++i) {
		while (ret.size() >= 2) {
			VT a = ret[ret.size()-2];
			VT b = ret[ret.size()-1];
			double det = ccw(a, b, p[i]);
			if (!equal(det, 0) && det > 0) break;
			ret.pop_back();
		}
		ret.push_back(p[i]);
	}
	return ret;
}
