LL gcd(LL x, LL y) {
    if (y == 0) return x;
    return gcd(y, x%y);
}
namespace miller_rabin {
    LL mult(LL x, LL y, LL M) {
        return (__int128)x * y % M;
    }
    LL pow(LL x, LL y, LL M) {
        LL ret = 1, piv = x%M;
        while (y) {
            if (y&1) ret = mult(ret, piv, M);
            piv = mult(piv, piv, M);
            y >>= 1;
        }
        return ret;
    }
    bool miller_rabin(LL x, LL a) {
        if (x%a == 0) return false;
        LL d = x-1;
        while (true) {
            LL tmp = pow(a, d, x);
            if (d&1) return (tmp != 1 && tmp != x-1);
            if (tmp == x-1) return false;
            d >>= 1;
        }
    }
    /******user interface******/
    bool is_prime(LL x) {
        // add more primes to improve accuracy
        for (auto& i : {2,3,5,7,11,13})
            if (miller_rabin(x, i)) return false;
        return true;
    }
}
namespace pollard_rho {
    LL f(LL x, LL n, LL c) {
        return (c + miller_rabin::mult(x, x, n)) % n;   
    }
    void rec(LL n, VL& v) {
        if (n == 1) return;
        if (n%2 == 0) {
            v.push_back(2);
            rec(n>>1, v);
            return;
        }
        if (miller_rabin::is_prime(n)) {
            v.push_back(n);
            return;
        }
        LL a, b, c;
        while (true) {
            a = rand()%(n-2) + 2;
            b = a;
            c = rand()%20 + 1;
            do {
                a = f(a, n, c);
                b = f(f(b, n, c), n, c);
            } while (gcd(abs(a-b), n) == 1);
            if (a != b) break;
        }
        LL x = gcd(abs(a-b), n);
        rec(x, v); rec(n/x, v);
    }
    /******user interface******/
    VL factorize(LL n) {
        VL ret; rec(n, ret);
        sort(all(ret));
        return ret;
    }
}
