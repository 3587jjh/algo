struct Dinic {
	struct Edge {
		int to, c, f;
		Edge* rev;
		Edge(int _to, int _c) :
			to(_to), c(_c), f(0) {}
		int r() {return c-f;}
		void push(int _f) {f+=_f; rev->f-=_f;}
	};
	int MAXV;
	vector<int> lv, work;
	vector<vector<Edge*>> adj;

	Dinic(int _MAXV=0) {
		MAXV = _MAXV;
		adj.resize(MAXV);
	}
	~Dinic() {
		for (int i = 0; i < MAXV; ++i) {
			for (Edge* e : adj[i]) delete e;
			adj[i].clear();
		}
	}

	bool bfs(int src, int dst) {
		lv = vector<int>(MAXV, -1);
		queue<int> q;
		lv[src] = 0;
		q.push(src);

		while (!q.empty()) {
			int u = q.front(); q.pop();
			for (Edge* e : adj[u]) {
				int v = e->to;
				if (lv[v] == -1 && e->r()) {
					lv[v] = lv[u]+1;
					q.push(v);
				}
			}
		}
		return lv[dst] != -1;
	}
	int dfs(int u, int dst, int bound) {
		if (u == dst) return bound;
		for (int& i = work[u]; i < adj[u].size(); ++i) {
			Edge* e = adj[u][i];
			int v = e->to;

			if (lv[v] == lv[u]+1 && e->r()) {
				int amt = dfs(v, dst, min(bound, e->r()));
				if (amt > 0) {
					e->push(amt);
					return amt;
				}
			}
		}
		return 0;
	} 
	/******user interface******/
	void add(int u, int v, int c) {
		Edge* e1 = new Edge(v, c);
		Edge* e2 = new Edge(u, 0);
		e1->rev = e2; e2->rev = e1;
		adj[u].push_back(e1);
		adj[v].push_back(e2);
	}
	int maxFlow(int src, int dst) {
		int ret = 0;
		while (bfs(src, dst)) {
			work = vector<int>(MAXV, 0);
			while (true) {
				int amt = dfs(src, dst, INT_MAX);
				if (!amt) break;
				ret += amt;
			}
		}
		return ret;
	}
};
