namespace modcalc {
	ll exGcd(ll a, ll b, ll& x, ll& y) {
		if (b == 0) {x = 1; y = 0; return a;}
		ll x1, y1;
		ll ret = exGcd(b, a%b, x1, y1);   
		x = y1; y = x1 - (a/b)*y1;
		return ret;
	}
	ll modInv(ll a, ll M) {
		ll x, y;
		ll res = exGcd(a, M, x, y);
		assert(res == 1);
		if (x < 0) x += M*((-x/M)+1);
		return x;
	}
	ll pow(ll a, ll n, ll M) {
		if (n == 0) return 1;
		if (n&1) return (a*pow(a, n-1, M))%M;
		ll half = pow(a, n>>1, M);
		return (half*half)%M;
	}
	/******user interface******/
	bool isPrime(ll M) {
		int ed = sqrt(M);
		for (int i = 2; i <= ed; ++i) {
			if (M%i == 0) return false;
		}
		return true;
	}
	ll getInv(ll a, ll M) {
		if (a >= M) a %= M;
		//if (isPrime(M)) return pow(a, M-2, M);
		//else return modInv(a, M);
		return pow(a, M-2, M);
	}
}
