namespace fft {
    typedef complex<double> Complex;
    const double PI = 2.0 * acos(0.0);
    int roundUp(int n) {
    	int ret = 1;
    	while(ret < n) ret <<= 1;
    	return ret;
    }
    void dft(vector<Complex>& v, const Complex& w) {
    	int n = v.size();
    	if(n == 1) return;
    
    	vector<Complex> even(n/2), odd(n/2);
    	for(int i = 0; i < n/2; ++i) {
    		even[i] = v[i*2];
    		odd[i] = v[i*2 + 1];
    	}
    	dft(even, w*w);
    	dft(odd, w*w);
    
    	Complex powW = 1.0;
    	for(int i = 0; i < n/2; ++i) {
    		Complex offset = powW * odd[i];
    		v[i] = even[i] + offset;
    		v[i + n/2] = even[i] - offset;
    		powW *= w; 
    	}
    }
    /******user interface******/
    // 3x^2 + 6x + 9 => a = [3, 6, 9]
    // polynomial multiplication
    VL mult(const VL& a, const VL& b) {
    	int n = roundUp(max(a.size(), b.size())) * 2;
    	vector<Complex> ac(a.begin(), a.end());
    	vector<Complex> bc(b.begin(), b.end());
    	ac.resize(n);
    	bc.resize(n);
    	
    	Complex w = polar(1.0, 2*PI/n);
    	dft(ac, w);
    	dft(bc, w);
    	for (int i = 0; i < n; ++i) ac[i] *= bc[i];
    	dft(ac, polar(1.0, -2*PI/n));
    	
    	VL ret(n);
    	for (int i = 0; i < n; ++i)
    		ret[i] = round((ac[i] / (double)n).real());
    	return ret;
    }
}
