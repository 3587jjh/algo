vector<int> getPi(const string& t) {
  vector<int> pi(t.size(), 0);
  int mch = 0, i = 1;

  while (i < t.size()) {
    if (mch < t.size() && t[i] == t[mch]) {
      ++mch; ++i;
      pi[i-1] = mch;
    }
    else if (mch) mch = pi[mch-1];
    else ++i;
  }
  return pi;
}

void kmp(const string& s, const string& t) {
  vector<int> pi = getPi(t);
  int mch = 0, i = 0;

  while (i < s.size()) {
    if (mch < t.size() && s[i] == t[mch]) {
      ++mch; ++i;
      if (mch == t.size()) {
        // do something
      }
    }
    else if (mch) mch = pi[mch-1];
    else ++i;
  }
}
