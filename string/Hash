// define MAX(=maximum string length) -> precalcR -> Hash3
const ull R[3] = {(ull)37, (ull)1e9+3, (ull)1e9+7}; // can modify
ull powR[3][MAX+1];

void precalcR() {
	for (int i = 0; i < 3; ++i) {
		powR[i][0] = 1;
		for (int j = 1; j <= MAX; ++j) {
			powR[i][j] = powR[i][j-1]*R[i];
		}
	}
}
struct Hash {
	const vector<ll>& v;
	int rIdx;
	vector<ull> h;

	Hash(const vector<ll>& _v, int _rIdx) : v(_v), rIdx(_rIdx) { // 0-based
		int n = sz(v);
		h.resize(n);
		for (int i = 0; i < n; ++i) {
			h[i] = v[i]*powR[rIdx][i];
			if (i > 0) h[i] += h[i-1];
		}
	}
	/******user interface******/
	ull getval(int l, int r) { // 0-based
		ull mult = h[r] - (l==0 ? 0 : h[l-1]);
		return mult*powR[rIdx][MAX-r];
	}
};

struct Hash3 {
	const vector<ll>& v;
	vector<Hash> f;

	Hash3(const vector<ll>& _v) : v(_v) { // 0-based
		for (int i = 0; i < 3; ++i) {
			f.pushb(Hash(v, i));
		}
	}
	/******user interface******/
	ull getval(int l, int r) { // 0-based
		ull ret = 0;
		for (int i = 0; i < 3; ++i) {
			ret += f[i].getval(l, r);
		}
		return ret;
	}
};
