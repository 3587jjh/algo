struct AhoCorasick {
	vector<map<int, int>> trie;
	int nid;
	vector<int> fail, term;
	vector<vector<int>> out;

	AhoCorasick() : nid(1) {
		trie.pushb(map<int, int>());
	}
	/******user interface******/
	void insert(const string& s, int sid) { // sid = 1-based
		int x = 0;
		for (char ch : s) {
			if (!trie[x].count(ch)) {
				trie[x][ch] = nid++;
				trie.pushb(map<int, int>());
			}
			x = trie[x][ch];
		}
		term.resize(nid);
		term[x] = sid;
	}
	void calcFail() { // no more insert from now
		fail.resize(nid);
		out.resize(nid);
		queue<int> q;
		q.push(0);

		while (!q.empty()) {
			int x = q.front(); q.pop();
			for (auto it : trie[x]) {
				int e = it.fst, y = it.snd, t = fail[x];
				while (t && !trie[t].count(e)) t = fail[t];
				if (x && trie[t].count(e)) t = trie[t][e];

				fail[y] = t;
				out[y] = out[t];
				if (term[y]) out[y].pushb(term[y]);
				q.push(y);
			}
		}
	}
	vii findFrom(const string& s) {
		vii ret; // (s에서 끝나는 위치, sid) 모음
		int cur = 0;

		for (int i = 0; i < s.size(); ++i) {
			char e = s[i];
			while (cur && !trie[cur].count(e)) cur = fail[cur];
			if (trie[cur].count(e)) cur = trie[cur][e];
			for (auto it : out[cur])
				ret.pushb({i, it});
		}
		return ret;
	}
};
