template <typename T>
struct FenTree {
	int n;
	VL A; // 1-based
	vector<T> tree;

	FenTree():n(0) {}
	FenTree(const VL& _A) {
		assert(!_A.empty()); A = _A;
		n = A.size()-1; tree.resize(n+1);
		for (int i = 1; i <= n; ++i)
			update(i, A[i]);
	}
	/******user interface******/
	T merge(T a, T b) {/**write**/}
	T query(int pos) {
		T ret = /**write**/;
		for (int p = pos; p > 0; p -= (p & -p))
			ret = merge(ret, tree[p]);
		return ret;
	}
	void update(int pos, LL val) {
		for (int p = pos; p <= n; p += (p & -p))
			tree[p] = merge(tree[p], /**write**/);
	}
};
