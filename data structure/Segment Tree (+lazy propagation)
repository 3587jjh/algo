template <typename T>
struct SegTree {
	int n;
	VL A; // 1-based
	VL lazy;
	vector<T> tree;

	SegTree():n(0) {}
	SegTree(const VL& _A) {
		assert(!_A.empty());
		A = _A; n = A.size()-1; 
		tree.resize(4*A.size());
		lazy.resize(4*A.size());
		init(1, 1, n);
	}
	T init(int node, int nl, int nr) {
		if (nl == nr) {
			/**write**/
			return tree[node];
		}
		int nm = (nl+nr)/2;
		return tree[node] = merge(init(node*2, nl, nm),
			init(node*2+1, nm+1, nr));
	}
	void propagate(int node, int nl, int nr) {
		if (lazy[node] == 0) return;
		if (nl < nr) {
		    /**write**/ //lazy[node*2] += lazy[node];
		    /**write**/ //lazy[node*2+1] += lazy[node];
		}
		/**write**/ //tree[node] += (nr-nl+1) * lazy[node];
		lazy[node] = 0;
	}
	T query(int l, int r, int node, int nl, int nr) {
		propagate(node, nl, nr);
		if (r < nl || nr < l) return /**write**/
		if (l <= nl && nr <= r) return tree[node];
		int nm = (nl+nr)/2;
		return merge(query(l, r, node*2, nl, nm),
			query(l, r, node*2+1, nm+1, nr));
	}
	T update(int l, int r, LL val, int node, int nl, int nr) {
		propagate(node, nl, nr);
		if (r < nl || nr < l) return tree[node];
		if (nl == nr) {
			/**write**/ //lazy[node] += val;
			propagate(node, nl, nr);
			return tree[node];
		}
		int nm = (nl+nr)/2;
		return tree[node] = merge(update(l, r, val, node*2, nl, nm),
			update(l, r, val, node*2+1, nm+1, nr));
	}
	/******user interface******/
	// fill "/**write**/" before use
	T merge(T a, T b) {/**write**/}
	T query(int l, int r) {
		return query(l, r, 1, 1, n);
	}
	void update(int l, int r, LL val) {
		update(l, r, val, 1, 1, n);
	}
};
